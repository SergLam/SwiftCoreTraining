{% include 'header' %}

import UIKit

protocol {{ module_info.name }}CollectionControllerDelegate: class {
    
    func didSelectItem(_ item: {{ custom_parameters.dto }})
}

final class {{ module_info.name }}CollectionController: NSObject {
    
    weak var delegate: {{ module_info.name }}CollectionControllerDelegate?
    
    private var dataSource: [{{ module_info.name }}CollectionViewCellViewModel] = []
    
    func updateDataSource(_ items: [{{ custom_parameters.dto }}]) {
        self.dataSource = items.map{ return {{ module_info.name }}CollectionViewCellViewModel($0) }
    }
    
}

// MARK: - UICollectionViewDataSource
extension {{ module_info.name }}CollectionController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return dataSource.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let identifier: String = {{ module_info.name }}CollectionViewCell.reuseIdentifier
        guard let cell: {{ module_info.name }}CollectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: identifier, for: indexPath) as? {{ module_info.name }}CollectionViewCell else {
            preconditionFailure("Unable to dequeueReusableCell")
        }
        cell.update(dataSource[indexPath.row])
        return cell
    }
    
}

// MARK: - UICollectionViewDelegate
extension {{ module_info.name }}CollectionController: UICollectionViewDelegate {

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        delegate?.didSelectItem(dataSource[indexPath.row].item)
    }
    
}

// MARK: - UICollectionViewDelegateFlowLayout
extension {{ module_info.name }}CollectionController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        return CGSize(width: {{ custom_parameters.cell_size }},
                      height: {{ custom_parameters.cell_size }})
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return {{ custom_parameters.spacing }}
    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return {{ custom_parameters.spacing }}
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets(top: {{ custom_parameters.spacing }},
                            left: {{ custom_parameters.spacing }},
                            bottom: {{ custom_parameters.spacing }},
                            right: {{ custom_parameters.spacing }})
    }
    
}
